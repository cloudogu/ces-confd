// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockWriter is an autogenerated mock type for the Writer type
type MockWriter struct {
	mock.Mock
}

type MockWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriter) EXPECT() *MockWriter_Expecter {
	return &MockWriter_Expecter{mock: &_m.Mock}
}

// WriteTemplate provides a mock function with given fields: services
func (_m *MockWriter) WriteTemplate(services TemplateModel) error {
	ret := _m.Called(services)

	if len(ret) == 0 {
		panic("no return value specified for WriteTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(TemplateModel) error); ok {
		r0 = rf(services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWriter_WriteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTemplate'
type MockWriter_WriteTemplate_Call struct {
	*mock.Call
}

// WriteTemplate is a helper method to define mock.On call
//   - services TemplateModel
func (_e *MockWriter_Expecter) WriteTemplate(services interface{}) *MockWriter_WriteTemplate_Call {
	return &MockWriter_WriteTemplate_Call{Call: _e.mock.On("WriteTemplate", services)}
}

func (_c *MockWriter_WriteTemplate_Call) Run(run func(services TemplateModel)) *MockWriter_WriteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TemplateModel))
	})
	return _c
}

func (_c *MockWriter_WriteTemplate_Call) Return(_a0 error) *MockWriter_WriteTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWriter_WriteTemplate_Call) RunAndReturn(run func(TemplateModel) error) *MockWriter_WriteTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWriter creates a new instance of MockWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWriter {
	mock := &MockWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
